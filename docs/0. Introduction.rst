=====================
Segments Introduction
=====================

Jumping Right In
================

>>> from segments import Ito
>>> i = Ito('Hello, world!')
>>> print(i)
'Hello, world!'

The segments module offers the class ``Ito``, short for *In Text Object*.  ``Ito`` is a high performance, indexed substring.
Creating an ``Ito`` does not result in memory allocation for character data, rather, an ``Ito`` maintains a reference to the
original string, along with start and stop indexes:

>>> i
Ito('Hello, world!', 0, 13, None)

``Ito`` Index Access
====================

Like a regular Python ``str``, you access character data in an ``Ito`` via ``int`` or ``slice`` indexers\ [#]_:

 >>> print(i[0])    # int accessor
 H
 >>> print(i[-1])   # int accessor
 !
 >>> print(i[:5])   # slice accessor
 Hello
 >>> print(i[-6:])  # slice accessor
 world!
 
The values returned from the indexer are themselves ``Ito`` instances:

 >>> i[-6:]
 Ito(Hello, world!', 7, 13, None)

Furthermore, indexing an ``Ito`` is always relative to itself.  All index book keeping is handled internally, allowing code like this:

>>> j = i[-6:]     # last 6 characters of Ito 'i'
>>> print(j[0:3])  # print first three characters of Ito 'j'
wor

Hierarchical Data Store
=======================

An ``Ito`` is also a hierarchical data store, whose nodes are also ``Ito`` instances.  Child nodes are accessed via the ``.children`` collection,
while the parent is available via the ``.parent`` property:

>>> s = 'Hello, world!'
>>> root = Ito(s)
>>> root.children.add(root[:5], root[-6:])
>>> [f'{c}' for c in root.children]
['Hello', 'world!']

.. [#] Slices with step values other than 1 (or ``None``) are not supported because the resulting sequences of characters will typically *not* be valid substrings.  For example, ``'abc[::-1]`` results in the reversed string ``cba``, which doesn't align with the starting ``str``.
